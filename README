README for pyGBot 0.1.2 - Alpha release

    pyGBot - Versatile IRC Bot
    Copyright (C) 2008 Morgan Lokhorst-Blight, Alex Soborov, Paul Rotering

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


Based on pyTBot, (c) 2007 Paul Rotering
http://www.ircpoker.com
Licensed under GPLv2

Uses ConfigObj, (c) 2008 Michael Foord and Nicola Larosa
http://www.voidspace.org.uk/python/configobj.html
Licensed under modified (3 clause) BSD License

Uses "C# Events in Python", (c) 2005 Zoran Isailovski
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/410686
Licensed under MIT License

Simple Disclaimer:
THIS IS AN ALPHA RELEASE. It it provided AS-IS, with no warranty or support.
If it breaks your computer, it's not our fault.

Requirements:
 - Python >= 2.5
 - Twisted >= 2.0 (including twisted.words)
 - pyOpenSSL (only when enabling SSL)

To run:
Uncompress, go to src/, rename pyGBot.ini.default to pygbot.ini and 
users.ini.default to users.ini, and modify the values in pyGBot.ini. The main 
ones you're interested in are host, port, nick, and channel. Once that's done,
run runpyGBot.py.

To log into the Auth system:
Some commands are limited to authorized users (see users.ini); this prevents
just anyone from telling pyGBot to join or leave a channel, for example. pyGBot
has two modes selectable in pyGBot.ini:
 - pygbot - uses its own username/password system stored in users.ini. To
   identify with pyGBot in this mode, send it a /msg with the text
   "auth user pass" (replace user/pass with your info).
 - nickserv - identifies users by checking to see if they're identified with
   NickServ. This works with the standard atheme NickServ service. To identify
   with pyGBot in this mode, send it a /msg with the text "auth".

To add users to the Auth system:
Run hashpw.py. it will prompt you for the relevant details. Note that the
password is useful only when using the pygbot auth mode; when in nickserv auth
mode, pyGBot will check if a user is identified with NickServ instead of
requiring a password.

To modify:
You can take a look at pyGBot/BasePlugin.py, as well as existing plugins in the
pyGBot/Plugins directory to see how things are done.

Every plugin must be a class that subclasses BasePlugin. You should override
methods in BasePlugin in order to intercept various IRC events, such as
receiving a message in a channel. When a plugin is loaded by pyGBot, the plugin
class is instantiated ONCE, and the plugin instance's methods are called
whenever the associated IRC event occurs.

For pyGBot's API, take a look at the first few methods in class GBot of
core.py (above loadPlugins), along with Twisted's documentation for the
irc.IRCClient class (which GBot subclasses). Logging facilities are
provided via log.logger (pyGBot's log) and log.chat (IRC chat log), which
are both instances of Python's built-in "logging" module. You can always
take a look at other plugins for examples on using the API.

Note that pyGBot will always pass messages to plugins as unicode strings,
NOT 8-bit strings (refer to the Python 2.x manual on str and unicode types).
pyGBot also expects plugins to pass it unicode strings, not encoded strings
(for example, when you're sending a message).

For the plugin to work, you have to add it to the list of plugins to be loaded
and activated in pyGBot.ini. The [Plugins] section lists plugins to load, and
the [Plugins.system.Startup] section lists plugins that are activated
immediately upon staring pyGBot.

Command system:
The system.Commands plugin provides a set of commands (extensible, of course!)
which are single-line calls made by users to enact some immediate response or
action. The existing ones are primarily related to controlling the bot (join /
part channel, send public message, etc.), but any single-line command could
conceivably be implemented here.

To write your own, start by taking a look at the BaseCommand class in
pyGBot/Plugins/system/Commands.py and at the existing commands in
pyGBot/Plugins/system/CommandSpec. Like Plugins, Commands need to be a class
that subclasses BaseClass. Unlike Plugins, command classes don't have a
persistent instance: when an IRC user calls on a command, the command class
is instantiated, its __init__ method is called with the command parameters,
and then the instance is discarded.

You can easily write Commands that act as a wrapper for a Plugin. Doing so
avoids the need to parse every incoming message to check whether it is a
command intended for your Plugin, and makes it easy to change the name IRC
users use to call the command (see the [Plugins.system.Commands] section of
pyGBot.ini).

If you have any further questions please contact us via email or the forums.
Both can be found at the project page:

http://sourceforge.net/projects/pygbot

Enjoy!
- The pyGBot Team
